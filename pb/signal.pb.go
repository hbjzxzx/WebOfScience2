// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.13.0
// source: signal.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type TunnelChannelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port string `protobuf:"bytes,2,opt,name=Port,proto3" json:"Port,omitempty"`
	Host string `protobuf:"bytes,3,opt,name=Host,proto3" json:"Host,omitempty"`
}

func (x *TunnelChannelResponse) Reset() {
	*x = TunnelChannelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_signal_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelChannelResponse) ProtoMessage() {}

func (x *TunnelChannelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_signal_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelChannelResponse.ProtoReflect.Descriptor instead.
func (*TunnelChannelResponse) Descriptor() ([]byte, []int) {
	return file_signal_proto_rawDescGZIP(), []int{0}
}

func (x *TunnelChannelResponse) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *TunnelChannelResponse) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

type TunnelChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host       string `protobuf:"bytes,1,opt,name=Host,proto3" json:"Host,omitempty"`
	TunnelName string `protobuf:"bytes,2,opt,name=TunnelName,proto3" json:"TunnelName,omitempty"`
}

func (x *TunnelChannelRequest) Reset() {
	*x = TunnelChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_signal_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelChannelRequest) ProtoMessage() {}

func (x *TunnelChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_signal_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelChannelRequest.ProtoReflect.Descriptor instead.
func (*TunnelChannelRequest) Descriptor() ([]byte, []int) {
	return file_signal_proto_rawDescGZIP(), []int{1}
}

func (x *TunnelChannelRequest) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *TunnelChannelRequest) GetTunnelName() string {
	if x != nil {
		return x.TunnelName
	}
	return ""
}

type ConnectMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host string `protobuf:"bytes,1,opt,name=Host,proto3" json:"Host,omitempty"`
	Port string `protobuf:"bytes,2,opt,name=Port,proto3" json:"Port,omitempty"`
}

func (x *ConnectMeta) Reset() {
	*x = ConnectMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_signal_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectMeta) ProtoMessage() {}

func (x *ConnectMeta) ProtoReflect() protoreflect.Message {
	mi := &file_signal_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectMeta.ProtoReflect.Descriptor instead.
func (*ConnectMeta) Descriptor() ([]byte, []int) {
	return file_signal_proto_rawDescGZIP(), []int{2}
}

func (x *ConnectMeta) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *ConnectMeta) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

type DataStreamMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamFD int64 `protobuf:"varint,1,opt,name=StreamFD,proto3" json:"StreamFD,omitempty"`
	// Types that are assignable to Meta:
	//	*DataStreamMsg_InitConnMeta
	//	*DataStreamMsg_Load
	Meta isDataStreamMsg_Meta `protobuf_oneof:"Meta"`
}

func (x *DataStreamMsg) Reset() {
	*x = DataStreamMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_signal_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataStreamMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataStreamMsg) ProtoMessage() {}

func (x *DataStreamMsg) ProtoReflect() protoreflect.Message {
	mi := &file_signal_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataStreamMsg.ProtoReflect.Descriptor instead.
func (*DataStreamMsg) Descriptor() ([]byte, []int) {
	return file_signal_proto_rawDescGZIP(), []int{3}
}

func (x *DataStreamMsg) GetStreamFD() int64 {
	if x != nil {
		return x.StreamFD
	}
	return 0
}

func (m *DataStreamMsg) GetMeta() isDataStreamMsg_Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (x *DataStreamMsg) GetInitConnMeta() *ConnectMeta {
	if x, ok := x.GetMeta().(*DataStreamMsg_InitConnMeta); ok {
		return x.InitConnMeta
	}
	return nil
}

func (x *DataStreamMsg) GetLoad() []byte {
	if x, ok := x.GetMeta().(*DataStreamMsg_Load); ok {
		return x.Load
	}
	return nil
}

type isDataStreamMsg_Meta interface {
	isDataStreamMsg_Meta()
}

type DataStreamMsg_InitConnMeta struct {
	InitConnMeta *ConnectMeta `protobuf:"bytes,2,opt,name=InitConnMeta,proto3,oneof"`
}

type DataStreamMsg_Load struct {
	Load []byte `protobuf:"bytes,3,opt,name=Load,proto3,oneof"`
}

func (*DataStreamMsg_InitConnMeta) isDataStreamMsg_Meta() {}

func (*DataStreamMsg_Load) isDataStreamMsg_Meta() {}

var File_signal_proto protoreflect.FileDescriptor

var file_signal_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03,
	0x77, 0x6f, 0x73, 0x22, 0x3f, 0x0a, 0x15, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x50, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x48, 0x6f, 0x73, 0x74, 0x22, 0x4a, 0x0a, 0x14, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x48, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x6f, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x35, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12,
	0x12, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48,
	0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x81, 0x01, 0x0a, 0x0d, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x46, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x46, 0x44, 0x12, 0x36, 0x0a, 0x0c, 0x49, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e,
	0x6e, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x77, 0x6f,
	0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x0c, 0x49, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x14, 0x0a,
	0x04, 0x4c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x4c,
	0x6f, 0x61, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x4d, 0x65, 0x74, 0x61, 0x32, 0xa8, 0x01, 0x0a, 0x0d,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4c, 0x0a,
	0x0f, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67,
	0x12, 0x19, 0x2e, 0x77, 0x6f, 0x73, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x77, 0x6f,
	0x73, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x49, 0x0a, 0x0e, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x12, 0x19, 0x2e,
	0x77, 0x6f, 0x73, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x77, 0x6f, 0x73, 0x2e, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x3b, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_signal_proto_rawDescOnce sync.Once
	file_signal_proto_rawDescData = file_signal_proto_rawDesc
)

func file_signal_proto_rawDescGZIP() []byte {
	file_signal_proto_rawDescOnce.Do(func() {
		file_signal_proto_rawDescData = protoimpl.X.CompressGZIP(file_signal_proto_rawDescData)
	})
	return file_signal_proto_rawDescData
}

var file_signal_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_signal_proto_goTypes = []interface{}{
	(*TunnelChannelResponse)(nil), // 0: wos.TunnelChannelResponse
	(*TunnelChannelRequest)(nil),  // 1: wos.TunnelChannelRequest
	(*ConnectMeta)(nil),           // 2: wos.ConnectMeta
	(*DataStreamMsg)(nil),         // 3: wos.DataStreamMsg
}
var file_signal_proto_depIdxs = []int32{
	2, // 0: wos.DataStreamMsg.InitConnMeta:type_name -> wos.ConnectMeta
	1, // 1: wos.TunnelService.ListenTunnelMsg:input_type -> wos.TunnelChannelRequest
	1, // 2: wos.TunnelService.CloseTunnelMsg:input_type -> wos.TunnelChannelRequest
	0, // 3: wos.TunnelService.ListenTunnelMsg:output_type -> wos.TunnelChannelResponse
	0, // 4: wos.TunnelService.CloseTunnelMsg:output_type -> wos.TunnelChannelResponse
	3, // [3:5] is the sub-list for method output_type
	1, // [1:3] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_signal_proto_init() }
func file_signal_proto_init() {
	if File_signal_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_signal_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelChannelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_signal_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_signal_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_signal_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataStreamMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_signal_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*DataStreamMsg_InitConnMeta)(nil),
		(*DataStreamMsg_Load)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_signal_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_signal_proto_goTypes,
		DependencyIndexes: file_signal_proto_depIdxs,
		MessageInfos:      file_signal_proto_msgTypes,
	}.Build()
	File_signal_proto = out.File
	file_signal_proto_rawDesc = nil
	file_signal_proto_goTypes = nil
	file_signal_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TunnelServiceClient is the client API for TunnelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TunnelServiceClient interface {
	ListenTunnelMsg(ctx context.Context, in *TunnelChannelRequest, opts ...grpc.CallOption) (TunnelService_ListenTunnelMsgClient, error)
	CloseTunnelMsg(ctx context.Context, in *TunnelChannelRequest, opts ...grpc.CallOption) (*TunnelChannelResponse, error)
}

type tunnelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTunnelServiceClient(cc grpc.ClientConnInterface) TunnelServiceClient {
	return &tunnelServiceClient{cc}
}

func (c *tunnelServiceClient) ListenTunnelMsg(ctx context.Context, in *TunnelChannelRequest, opts ...grpc.CallOption) (TunnelService_ListenTunnelMsgClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TunnelService_serviceDesc.Streams[0], "/wos.TunnelService/ListenTunnelMsg", opts...)
	if err != nil {
		return nil, err
	}
	x := &tunnelServiceListenTunnelMsgClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TunnelService_ListenTunnelMsgClient interface {
	Recv() (*TunnelChannelResponse, error)
	grpc.ClientStream
}

type tunnelServiceListenTunnelMsgClient struct {
	grpc.ClientStream
}

func (x *tunnelServiceListenTunnelMsgClient) Recv() (*TunnelChannelResponse, error) {
	m := new(TunnelChannelResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tunnelServiceClient) CloseTunnelMsg(ctx context.Context, in *TunnelChannelRequest, opts ...grpc.CallOption) (*TunnelChannelResponse, error) {
	out := new(TunnelChannelResponse)
	err := c.cc.Invoke(ctx, "/wos.TunnelService/CloseTunnelMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TunnelServiceServer is the server API for TunnelService service.
type TunnelServiceServer interface {
	ListenTunnelMsg(*TunnelChannelRequest, TunnelService_ListenTunnelMsgServer) error
	CloseTunnelMsg(context.Context, *TunnelChannelRequest) (*TunnelChannelResponse, error)
}

// UnimplementedTunnelServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTunnelServiceServer struct {
}

func (*UnimplementedTunnelServiceServer) ListenTunnelMsg(*TunnelChannelRequest, TunnelService_ListenTunnelMsgServer) error {
	return status.Errorf(codes.Unimplemented, "method ListenTunnelMsg not implemented")
}
func (*UnimplementedTunnelServiceServer) CloseTunnelMsg(context.Context, *TunnelChannelRequest) (*TunnelChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseTunnelMsg not implemented")
}

func RegisterTunnelServiceServer(s *grpc.Server, srv TunnelServiceServer) {
	s.RegisterService(&_TunnelService_serviceDesc, srv)
}

func _TunnelService_ListenTunnelMsg_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TunnelChannelRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TunnelServiceServer).ListenTunnelMsg(m, &tunnelServiceListenTunnelMsgServer{stream})
}

type TunnelService_ListenTunnelMsgServer interface {
	Send(*TunnelChannelResponse) error
	grpc.ServerStream
}

type tunnelServiceListenTunnelMsgServer struct {
	grpc.ServerStream
}

func (x *tunnelServiceListenTunnelMsgServer) Send(m *TunnelChannelResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TunnelService_CloseTunnelMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TunnelChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServiceServer).CloseTunnelMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wos.TunnelService/CloseTunnelMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServiceServer).CloseTunnelMsg(ctx, req.(*TunnelChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TunnelService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "wos.TunnelService",
	HandlerType: (*TunnelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CloseTunnelMsg",
			Handler:    _TunnelService_CloseTunnelMsg_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListenTunnelMsg",
			Handler:       _TunnelService_ListenTunnelMsg_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "signal.proto",
}
